// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NSG.WebSrv.Domain.Entities;

namespace NSG.WebSrv.Domain.Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190706152630_Update-2019-07-06-v03")]
    partial class Update20190706v03
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("IdentityRoleClaim<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("IdentityUserClaim<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("CompanyId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserNicName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.ApplicationUserServer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<int>("ServerId");

                    b.HasKey("Id", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("ApplicationUserApplicationServer");
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(80);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("CompanyShortName")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15);

                    b.Property<string>("State")
                        .HasMaxLength(4);

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.IncidentType", b =>
                {
                    b.Property<int>("IncidentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IncidentTypeDesc")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("IncidentTypeEmailTemplate")
                        .IsRequired()
                        .HasMaxLength(1073741823);

                    b.Property<bool>("IncidentTypeFromServer");

                    b.Property<string>("IncidentTypeLogTemplate")
                        .IsRequired()
                        .HasMaxLength(1073741823);

                    b.Property<string>("IncidentTypeShortDesc")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("IncidentTypeSubjectLine")
                        .IsRequired()
                        .HasMaxLength(1073741823);

                    b.Property<string>("IncidentTypeTemplate")
                        .IsRequired()
                        .HasMaxLength(1073741823);

                    b.Property<string>("IncidentTypeThanksTemplate")
                        .IsRequired()
                        .HasMaxLength(1073741823);

                    b.Property<string>("IncidentTypeTimeTemplate")
                        .IsRequired()
                        .HasMaxLength(1073741823);

                    b.HasKey("IncidentTypeId");

                    b.HasIndex("IncidentTypeShortDesc")
                        .IsUnique()
                        .HasName("Idx_IncidentType_ShortDesc");

                    b.ToTable("IncidentType");
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.LogData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Exception")
                        .HasMaxLength(4000);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<byte>("LogLevel");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("ServerId");

                    b.Property<string>("UserAccount")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.NetworkLog", b =>
                {
                    b.Property<long>("NetworkLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("IncidentId");

                    b.Property<int>("IncidentTypeId");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasMaxLength(1073741823);

                    b.Property<DateTime>("NetworkLogDate");

                    b.Property<int>("ServerId");

                    b.HasKey("NetworkLogId");

                    b.HasIndex("IncidentTypeId");

                    b.HasIndex("ServerId");

                    b.ToTable("NetworkLog");
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<bool>("DST");

                    b.Property<DateTime?>("DST_End");

                    b.Property<DateTime?>("DST_Start");

                    b.Property<string>("FromEmailAddress")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FromNicName")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("ServerDescription")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ServerLocation")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("ServerShortName")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("TimeZone_DST")
                        .HasMaxLength(16);

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ServerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ServerShortName")
                        .IsUnique()
                        .HasName("Idx_AspNetServers_ShortName");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NSG.WebSrv.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.ApplicationUserServer", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserServers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NSG.WebSrv.Domain.Entities.Server", "Server")
                        .WithMany("UserServers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.NetworkLog", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.IncidentType", "IncidentType")
                        .WithMany("NetworkLogs")
                        .HasForeignKey("IncidentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("NSG.WebSrv.Domain.Entities.Server", "Server")
                        .WithMany("NetworkLogs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("NSG.WebSrv.Domain.Entities.Server", b =>
                {
                    b.HasOne("NSG.WebSrv.Domain.Entities.Company", "Company")
                        .WithMany("Servers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
